#!/usr/bin/env ruby

require 'rubygems'
require 'find'
require 'optparse'
require 'dotsmack'
require 'yaml'
require 'gtdlint'
require 'json'

STAT_HEADER = <<-eos
{
  "statVersion": "0.4.0",
  "process": {
    "name": "Search for TO-DO items to complete in large projects",
    "version": "#{GTDLint::VERSION}",
    "description": "Searches your projects for code comments indicating TODOs, FIXMEs, and other changes that need to be made",
    "maintainer": "Andrew Pennebaker",
    "email": "andrew.pennebaker@gmail.com",
    "website": "https://github.com/mcandre/gtdlint",
    "repeatability": "Associative"
  },
  "findings": [
eos

STAT_FOOTER = <<-eos

  ]
}
eos

def main
  ignores = DEFAULT_IGNORES

  configuration_flags = {}

  option = OptionParser.new do |option|
    option.banner = "Usage: gtdlint [options] [<files>|-]"

    option.on('-i', '--ignore pattern', 'Ignore file pattern (fnmatch)') do |pattern|
      ignores << pattern
    end

    option.on('-p', '--gtd-pattern pattern', 'Custom GTD pattern') do |pattern|
      configuration_flags["gtd_pattern"] = pattern
    end

    option.on('-B', '--lines-before=n', 'Also show n lines before matching line, incompatible with STAT output') do |n|
      configuration_flags["lines_before"] = n.to_i
    end

    option.on('-A', '--lines-after=n', 'Also show n lines after matching line, incompatible with STAT output') do |n|
      configuration_flags["lines_after"] = n.to_i
    end

    option.on('-s', '--stat', 'Output in STAT') do
      configuration_flags["is_stat"] = true
    end

    option.on('-h', '--help', 'Print usage info') do
      puts option
      exit
    end

    option.on('-v', '--version', 'Print version info') do
      puts "gtdlint #{GTDLint::VERSION}"
      exit
    end
  end

  option.parse!

  if configuration_flags['is_stat'] &&
      (configuration_flags.key?('lines_before') || configuration_flags.key?('lines_after'))
    puts 'Error: Incompatible options'
    exit
  end

  filenames =
    if ARGV == []
      ['-']
    else
      ARGV
    end

  dotsmack = Dotsmack::Smacker.new(
    dotignore = '.gtdlintignore',
    additional_ignores = ignores,
    dotconfig = '.gtdlintrc.yml'
  )
  finding_count = 0
  dotsmack.enumerate(filenames).each do |filename, config|
    config =
      if config.nil?
        DEFAULT_CONFIGURATION.merge(configuration_flags)
      else
        YAML.load(config).merge(DEFAULT_CONFIGURATION).merge(configuration_flags)
      end

    if filename == '-'
      check_stdin(config) {|finding|
        finding_count = output(finding, finding_count, configuration_flags["is_stat"])
      }
    else
      check(filename, config) {|finding|
        finding_count = output(finding, finding_count, configuration_flags["is_stat"])
      }
    end
  end

  if configuration_flags["is_stat"] && finding_count > 0
    puts STAT_FOOTER
  end
end

def output(finding, finding_count, is_stat)
  if is_stat
    puts STAT_HEADER if finding_count == 0
    puts ',' if finding_count > 0
    print JSON.pretty_generate(finding).lines.map { |line| '    ' + line }.join
  end
  return finding_count + 1
end

begin
  main
# User may quit before completion.
rescue Interrupt
  nil
# Bad regex
rescue RegexpError => e
  puts e
# This program may be piped to another program (e.g. `less`),
# which is quit before this program completes.
rescue Errno::EPIPE, Errno::EMFILE
  nil
end
