#!/usr/bin/env ruby

require 'rubygems'
require 'find'
require 'optparse'
require 'dotsmack'
require 'yaml'
require 'gtdlint'
require 'json'

def main
    ignores = DEFAULT_IGNORES

    configuration_flags = {}

    option = OptionParser.new do |option|
        option.banner = "Usage: gtdlint [options] [<files>|-]"

        option.on('-i', '--ignore pattern', 'Ignore file pattern (fnmatch)') do |pattern|
            ignores << pattern
        end

        option.on('-p', '--gtd-pattern pattern', 'Custom GTD pattern') do |pattern|
            configuration_flags["gtd_pattern"] = pattern
        end

        option.on('-B', '--lines-before=n', 'Also show n lines before matching line, incompatible with STAT output') do |n|
            configuration_flags["lines_before"] = n.to_i
        end

        option.on('-A', '--lines-after=n', 'Also show n lines after matching line, incompatible with STAT output') do |n|
            configuration_flags["lines_after"] = n.to_i
        end

        option.on('-s', '--stat', 'Output in STAT') do
            configuration_flags["is_stat"] = true
        end

        option.on('-h', '--help', 'Print usage info') do
            puts option
            exit
        end

        option.on('-v', '--version', 'Print version info') do
            puts "gtdlint #{GTDLint::VERSION}"
            exit
        end
    end

    option.parse!

    filenames =
    if ARGV == []
        ['-']
    else
        ARGV
    end

    findings = []
    dotsmack = Dotsmack::Smacker.new(
        dotignore = '.gtdlintignore',
        additional_ignores = ignores,
        dotconfig = '.gtdlintrc.yml'
    )
    dotsmack.enumerate(filenames).each do |filename, config|
        config =
        if config.nil?
            DEFAULT_CONFIGURATION.merge(configuration_flags)
        else
            YAML.load(config).merge(DEFAULT_CONFIGURATION).merge(configuration_flags)
        end

        if filename == '-'
            check_stdin(config)
        else
            check(filename, config)
        end
    end
end

begin
    main
    # User may quit before completion.
rescue Interrupt
    nil
    # Bad regex
rescue RegexpError => e
    puts e
    # This program may be piped to another program (e.g. `less`),
    # which is quit before this program completes.
rescue Errno::EPIPE, Errno::EMFILE
    nil
end
